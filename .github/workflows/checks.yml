# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  # NOTE: the value of `group` should be chosen carefully,
  # otherwise we might end up over- or under-canceling workflow runs
  # github.head_ref is only defined for pull request events
  # so, if it's not present (i.e. event was triggered by push)
  # we use github.ref instead
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    # important to make sure that all commands on Windows are run using Bash
    # -l: login shell, needed when using Conda
    shell: bash -l {0}

env:
  # --color=yes needed for colorized output to be shown in GHA logs
  # --pyargs watertap is needed to be able to define CLI options in watertap/conftest.py
  PYTEST_ADDOPTS: "--color=yes"
  PIP_PROGRESS_BAR: "off"

jobs:

  code-formatting:
    name: Check code is formatted (Black)
    # OS and/or Python version don't make a difference, so we choose ubuntu and 3.8 as defaults
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Black
        # unlike the other jobs, we don't need to install WaterTAP and/or all the dev dependencies,
        # but we still want to specify the Black version to use in requirements-dev.txt for local development
        # so we extract the relevant line and pass it to a simple `pip install`
        run: |
          black_requirement="$(grep '^black==' requirements-dev.txt)"
          pip --no-cache-dir install "$black_requirement"
      - name: Run Black to verify that the committed code is formatted
        run: |
          black --check .

  tests:
    name: Tests (py${{ matrix.python-version }}/${{ matrix.os }}/rep=${{ matrix.rep }})
    runs-on: ${{ matrix.os-version }}
    needs: [code-formatting]
    strategy:
      fail-fast: false
      matrix:
        rep: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        os:
          - linux
        include:
          - os: linux
            os-version: ubuntu-20.04
          - python-version: '3.8'
            # limit uploading coverage report for a single Python version in the matrix
            cov_report: true
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: watertap-dev
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        echo '::group::Output of "conda install" commands'
        conda install --quiet --yes pip setuptools wheel pandoc
        echo '::endgroup::'
        echo '::group::Output of "pip install" commands'
        pip install -r requirements-dev.txt
        echo '::endgroup::'
        echo '::group::Display installed packages'
        conda list
        pip list
        pip show idaes-pse
        echo '::endgroup::'
        echo '::group::Output of "idaes get-extensions" command'
        idaes get-extensions --verbose
        echo '::endgroup::'
    - name: Add coverage report pytest options
      if: matrix.cov_report
      run:
        |
        echo PYTEST_ADDOPTS="$PYTEST_ADDOPTS --cov-report=xml --cov-append" >> $GITHUB_ENV
    - name: Test with pytest (tools)
      run: |
        pytest --pyargs watertap -m 'tools' -k 'not (test_multiple_subprocesses_with_multiprocessing or keyword_without_match)' --verbose --capture=no
      timeout-minutes: 5
